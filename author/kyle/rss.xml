<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>kheuton.github.io/</title>
   
   <link>http://kheuton.github.io/</link>
   <description></description>
   <language>en-uk</language>
   <managingEditor> Kyle Heuton</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Visualizing Seattle's Achievement Gap</title>
	  <link>//map-gap</link>
	  <author>Kyle Heuton</author>
	  <pubDate>2017-04-03T03:18:00-07:00</pubDate>
	  <guid>//map-gap</guid>
	  <description><![CDATA[
	     <script type="text/javascript" src="my_layer.json"></script>

<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>

<script type="text/javascript" src="http://d3js.org/queue.v1.min.js"></script>

<script type="text/javascript" src="http://d3js.org/topojson.v0.min.js"></script>

<style>

svg {
  position: relative;
}


.map {
  width: 960px;
  height: 500px;
}
.map {
  position: relative;
  overflow: hidden;
}
.layer {
  position: absolute;
}
.tile {
  pointer-events: none;
  position: absolute;
  width: 256px;
  height: 256px;
}

	.info {
		padding: 6px 8px;
		font: 14px/16px Arial, Helvetica, sans-serif;
		background: white;
		background: rgba(255,255,255,0.8);
		box-shadow: 0 0 15px rgba(0,0,0,0.2);
		border-radius: 5px;
	}
	.info h4 {
		margin: 0 0 5px;
		color: #777;
	}
.legend {
	text-align: left;
	line-height: 18px;
	color: #555;
}
.legend i {
	width: 18px;
	height: 18px;
	float: left;
	margin-right: 8px;
	opacity: 0.7;
}

.control-container {
  display: inline-block;
  padding: 5px;
}

.control-group {
  display: table-row;
}


</style>

<p>A tool to help explore the achievement gap in Seattle. Currently only has data for elementary schools in the 2014-2015 school year, but I plan to add more years of data and levels of education. Select the grade, assessment, and subject from the dropdown menus below, then choose two student demograhpic subgroups to compare. A gray border indicates that some data has been suppressed from that school; the most common reason for suppression is if there are fewer than 10 students of that sub-population in that grade for that school.</p>

<div id="control-main" class="control-container">
  <div id="control-group-assessment" class="control-container control-group">
    <div id="control-container-select-year" class="control-container control-container-select">
      <div id="control-label-select-year" class="control-label control-label-select">
        School Year
      </div>
      <div id="control-select-year">
        <select id="schoolYear"></select>
      </div>
    </div>
    <div id="control-container-select-grade" class="control-container control-container-select">
      <div id="control-label-select-grade" class="control-label control-label-select">
        Grade
      </div>
      <div id="control-select-grade">
        <select id="grade"></select>
      </div>
    </div>
    <div id="control-container-select-assessment" class="control-container control-container-select">
      <div id="control-label-select-assessment" class="control-label control-label-select">
        Assessment
      </div>
      <div id="control-select-assessment">
        <select id="assessment"></select>
      </div>
    </div>
    <div id="control-container-select-subject" class="control-container control-container-select">
      <div id="control-label-select-subject" class="control-label control-label-select">
        Subject
      </div>
      <div id="control-select-subject">
        <select id="subject"></select>
      </div>
    </div>
  </div>
  <div id="control-group-demographic" class="control-container control-group">
    <div id="control-container-select-demoA" class="control-container control-container-select">
      <div id="control-label-select-demoA" class="control-label control-label-select">
        Comparison Student Group A
      </div>
      <div id="control-select-demoA">
        <select id="demoA"></select>
      </div>
    </div>
    <div id="control-container-select-demoB" class="control-container control-container-select">
      <div id="control-label-select-demoB" class="control-label control-label-select">
        Comparison Student Group B
      </div>
      <div id="control-select-demoB">
        <select id="demoB"></select>
      </div>
    </div>
  </div>
</div>
<div id="map">
</div>

<script src="//d3js.org/d3.v3.min.js"></script>

<script src="../d3.geo.tile.min.js"></script>

<script>

// To make sure highlighted school shows up correctly
d3.selection.prototype.moveToFront = function() {  
  return this.each(function(){
    this.parentNode.appendChild(this);
  });
};

// Build the dropdown
d3.json("valid_elementary_inputs.json", function(error, collection) {
  if (error) throw error;

  var valid_inputs = collection;

  // Build year dropdown
  d3.select("#schoolYear").on("change", onChangeBroad)
      .selectAll("option")
      .remove()
      .data(Object.keys(valid_inputs))
      .enter()
      .append("option")
      .text(function (d) { return d; });

  resetDropdown(valid_inputs, "2014-2015", "3rd", "SBA", "ELA", "Black / African American", "White")

  function onChangeBroad() {

    dropdown = pollDropdown();

    resetDropdown(valid_inputs, dropdown["year"], dropdown["grade"],
                  dropdown["assessment"], dropdown["subject"], dropdown["demoA"], dropdown["demoB"])

    onChangeMap();

  }

  function onChangeMap() {
    var feature = g.selectAll("path")
             .style("fill",function (d,i) { return getColor(computeGap(d.properties)) })
             .style("stroke",function (d,i) { return getBorderColor(computeMiss(d.properties))})
             .style("stroke-width", 2)
             .style("stroke-dasharray", 3)
             .attr("fill-opacity",0.7)
             .style("stroke-opacity",1)
             .on("mouseover",highlightFeature)
             .on("click", highlightFeature)
             .on("mouseout", resetHighlightMouse)
             .on("dblclick", zoomToFeature);
  };

  function resetDropdown(valid_inputs, year, grade, assessment, subject, demoA, demoB) {

      // Update grade
      d3.select("#grade").on("change", onChangeBroad)
          .selectAll("option")
          .remove()
      d3.select("#grade").on("change", onChangeBroad)
          .selectAll("option")
      	  .data(Object.keys(valid_inputs[year]))
          .enter()
      	  .append("option")
      		.text(function (d) { return d; })

      if (isValidOpt("grade", grade)) {
        d3.select("#grade").property("value", grade);
      } else{
        var grade = d3.select("#grade").node().value
      };


      // Update assessment
      d3.select("#assessment").on("change", onChangeBroad)
          .selectAll("option")
          .remove()
      d3.select("#assessment").on("change", onChangeBroad)
          .selectAll("option")
      	  .data(Object.keys(valid_inputs[year][grade]))
          .enter()
      	  .append("option")
      		.text(function (d) { return d; });

      if (isValidOpt("assessment", assessment)) {
        d3.select("#assessment").property("value", assessment);
      } else{
        var assessment = d3.select("#assessment").node().value
      };

      // Update subject
      d3.select("#subject").on("change", onChangeBroad)
          .selectAll("option")
          .remove()
      d3.select("#subject").on("change", onChangeBroad)
          .selectAll("option")
          .data(Object.keys(valid_inputs[year][grade][assessment]))
          .enter()
          .append("option")
          .text(function (d) { return d; });

      if (isValidOpt("subject", subject)) {
        d3.select("#subject").property("value", subject);
      } else{
        var subject = d3.select("#subject").node().value
      };

      // Update demoA
      d3.select("#demoA").on("change", onChangeMap)
          .selectAll("option")
          .remove()
      d3.select("#demoA").on("change", onChangeMap)
          .selectAll("option")
          .data(valid_inputs[year][grade][assessment][subject])
          .enter()
          .append("option")
          .text(function (d) { return d; });

      if (isValidOpt("demoA", demoA)) {
        d3.select("#demoA").property("value", demoA);
      };
      // Update demoB
      d3.select("#demoB").on("change", onChangeMap)
          .selectAll("option")
          .remove()
      d3.select("#demoB").on("change", onChangeMap)
          .selectAll("option")
          .data(valid_inputs[year][grade][assessment][subject])
          .enter()
          .append("option")
          .text(function (d) { return d; });

      if (isValidOpt("demoB", demoB)) {
        d3.select("#demoB").property("value", demoB);
      };

  }

});

// Build the map
var map = L.map('map').setView([47.6062, -122.3321], 11);
L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
	maxZoom: 18,
	attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
}).addTo(map);

var svg = d3.select(map.getPanes().overlayPane).append("svg"),
    g = svg.append("g").attr("class", "leaflet-zoom-hide");

// Grab the student data
d3.json("elementary_layer.json", function(error, collection) {
  if (error) throw error;



  var transform = d3.geo.transform({point: projectPoint}),
      path = d3.geo.path().projection(transform);

  var feature = g.selectAll("path")
      .data(collection.features)
    .enter().append("path").attr("d", path)
           .style("fill",function (d,i) { return getColor(computeGap(d.properties)) })
           .style("stroke",function (d,i) { return getBorderColor(computeMiss(d.properties))})
           .style("stroke-width", 2)
           .style("stroke-dasharray", 3)
           .attr("fill-opacity",0.7)
           .style("stroke-opacity",1)
           .on("mouseover",highlightFeature)
           .on("click", highlightFeature)
           .on("mouseout", resetHighlightMouse)
           .on("dblclick", zoomToFeature);
   map.on("viewreset", reset);
   reset();

   // Reposition the SVG to cover the features.
   function reset() {
     var bounds = path.bounds(collection),
         topLeft = bounds[0],
         bottomRight = bounds[1];

     svg .attr("width", bottomRight[0] - topLeft[0])
         .attr("height", bottomRight[1] - topLeft[1])
         .style("left", topLeft[0] + "px")
         .style("top", topLeft[1] + "px");

     g.attr("transform", "translate(" + -topLeft[0] + "," + -topLeft[1] + ")");

     feature.attr("d", path);
   }


  // Use Leaflet to implement a D3 geometric transformation.
  function projectPoint(x, y) {
    var point = map.latLngToLayerPoint(new L.LatLng(y, x));
    this.stream.point(point.x, point.y);
  }



});
map.attributionControl.addAttribution('Assessment data &copy; <a href="http://www.k12.wa.us/">OSPI</a>');

var legend = L.control({position: 'bottomright'});

legend.onAdd = function (map) {

  var div = L.DomUtil.create('div', 'info legend'),
    grades = [60, 60, 45, 30, 15, 5, 5, 15, 30, 45,  60],
    labels = [],
    from, to;

  for (var i = 0; i < grades.length; i++) {
    from = grades[i];
    to = grades[i + 1];

    var flip_spot = 5;

    var flip = i >= flip_spot

    if (i==0 || i==(grades.length-1)) {

      if (flip) {
        var color = getColor(-grades[i]-1)
      } else {
        var color = getColor(grades[i]+1)
      }

      labels.push(
        '<i style="background:' + color + '"></i> ' +
        from + '+');

    } else if (i==flip_spot) {
        var color = getColor(0)
        labels.push(
          '<i style="background:' + color + '"></i> ' +
          grades[i] + '&ndash;' + grades[i+1]);
      } else if (flip) {
        console.log(-(grades[i+1] - grades[i])/2 -grades[i])
        var color = getColor(-(grades[i+1] - grades[i])/2 -grades[i])
        labels.push(
          '<i style="background:' + color + '"></i> ' +
          grades[i] + '&ndash;' + grades[i+1]);
      }
      else {
        var color = getColor((grades[i] - grades[i+1])/2 +grades[i+1])
        labels.push(
          '<i style="background:' + color + '"></i> ' +
          grades[i] + '&ndash;' + grades[i+1]);
      }
    }




  div.innerHTML = labels.join('<br>');
  return div;
};

legend.addTo(map);

// get color depending on population density value
function getColor(d) {
 return d > 60 ? '#313695' :
        d > 45  ? '#4575b4' :
        d > 30  ? '#74add1' :
        d > 15  ? '#abd9e9' :
        d > 5   ? '#e0f3f8' :
        d > -5   ? '#ffffbf' :
        d > -15  ? '#fee090' :
        d > -30 ? '#fdae61' :
        d > -45  ? '#f46d43' :
        d > -60   ? '#d73027' :
                   '#a50026';
}
function getBorderColor(d) {
 return d  ? 'gray' :
                   'black';
}


// control that shows state info on hover
var info = L.control();

info.onAdd = function (map) {
  this._div = L.DomUtil.create('div', 'info');
  this.update();
  return this._div;
};

info.update = function (props) {
  this._div.innerHTML = computeText(props)
};
info.addTo(map);

function isValidOpt(select_id, option) {


  var opts = document.getElementById(select_id).options;
  var opt_values = [];
  for (i = 0; i < opts.length; i++) {
    opt_values.push(opts[i].value);
  }


  return (opt_values.indexOf(option) > -1);

};

function pollDropdown() {
  var current_year = d3.select("#schoolYear").node().value
  var current_grade = d3.select("#grade").node().value
  var current_assessment = d3.select("#assessment").node().value
  var current_subject = d3.select("#subject").node().value
  var demoA = d3.select("#demoA").node().value
  var demoB = d3.select("#demoB").node().value

  return {
          "year": current_year,
          "grade": current_grade,
          "assessment": current_assessment,
          "subject": current_subject,
          "demoA": demoA,
          "demoB": demoB
        };
};


var lastClicked;

function highlightFeature(e) {

  var feature = d3.select(this)
  feature.style("stroke-width", 5)
  feature.moveToFront()
  feature.style("stroke-dasharray", 0 )
  feature.attr("fill-opacity",0.7)
  feature.style("stroke-opacity",1)
  var layer = e.target;


  info.update(e.properties);
  if (lastClicked && (lastClicked.id != feature.id)) {
    resetHighlightClick(lastClicked);
  }

  lastClicked = feature;
}
function resetHighlightMouse(feature) {
  var feature = d3.select(this)
  resetStyle(feature)
  info.update();
}
function resetHighlightClick(feature) {

  resetStyle(feature)
}

function resetStyle(feature) {

  feature.style("stroke-width", 2)
  feature.style("stroke-dasharray", 3)
  feature.attr("fill-opacity",0.7)
  feature.style("stroke-opacity",1.0)
}

function zoomToFeature(e) {
  map.fitBounds(e.target.getBounds());
}

function onEachFeature(feature, layer) {
  layer.on({
    mouseover: highlightFeature,
    click: highlightFeature,
    mouseout: resetHighlightMouse,
    dblclick: zoomToFeature
  });
}

function computeGap(properties) {
  var dropdown = pollDropdown();
  var year = dropdown["year"]
  var grade = dropdown["grade"]
  var assessment = dropdown["assessment"]
  var subject = dropdown["subject"]
  var demoA = dropdown["demoA"]
  var demoB = dropdown["demoB"]


  var valA = properties[year][grade][assessment][subject][demoA].value
  var valB = properties[year][grade][assessment][subject][demoB].value
  gap = valA - valB;

  return valA-valB
};

function computeMiss(properties) {
  var dropdown = pollDropdown();
  var year = dropdown["year"]
  var grade = dropdown["grade"]
  var assessment = dropdown["assessment"]
  var subject = dropdown["subject"]
  var demoA = dropdown["demoA"]
  var demoB = dropdown["demoB"]

  var missA = properties[year][grade][assessment][subject][demoA].missing
  var missB = properties[year][grade][assessment][subject][demoB].missing

  return (missA || missB)
}

function computeText(properties) {

  if (properties){

    var dropdown = pollDropdown();
    var year = dropdown["year"]
    var grade = dropdown["grade"]
    var assessment = dropdown["assessment"]
    var subject = dropdown["subject"]
    var demoA = dropdown["demoA"]
    var demoB = dropdown["demoB"]
    var valA = properties[year][grade][assessment][subject][demoA].value
    var valB = properties[year][grade][assessment][subject][demoB].value
    var missA = properties[year][grade][assessment][subject][demoA].missing
    var missB = properties[year][grade][assessment][subject][demoB].missing

    if (valA < valB) {
      var lowVal = valA;
      var highVal = valB;
      var lowMiss = missA;
      var highMiss = missB;
      var lowName = demoA;
      var highName = demoB;
    } else {
      var lowVal = valB;
      var highVal = valA;
      var lowMiss = missB;
      var highMiss = missA;
      var lowName = demoB;
      var highName = demoA;
    }

    // Add a space to the names so I can get rid of all

    var gap = highVal - lowVal;
    gap = gap.toFixed(1)

    if (highName == "All"){
      var highName = ""
    } else {
      var highName = highName + " "
    }
    if (lowName == "All"){
      var lowName = ""
    } else {
      var lowName = lowName + " "
    }


    if (missA && missB) {
      ret = '<h4>Achievement Gap</h4>' +  (properties ?
        '<b>' + properties.ES_ZONE + '</b><br />' + 'All data are suppressed for this school. City-wide, '+ gap + '% more ' + highName + 'students meet standards than their ' + lowName + 'peers'
        : 'Hover over a school');
    } else if(highMiss) {
      ret = '<h4>Achievement Gap</h4>' +  (properties ?
        '<b>' + properties.ES_ZONE + '</b><br />' + highName +'student data are suppressed for this school. City-wide, '+ gap + '% more ' + highName + 'students meet standards than '+ lowName + 'students at this school'
        : 'Hover over a school');
    } else if(lowMiss) {

      ret = '<h4>Achievement Gap</h4>' +  (properties ?
        '<b>' + properties.ES_ZONE + '</b><br />' + lowName +'student data are suppressed for this school. '+ gap + '% more ' + highName + 'students at this school meet standards than '+ lowName + 'students city-wide.'
        : 'Hover over a school');
    } else {
      if (highName != "All") {
        ret = '<h4>Achievement Gap</h4>' +  (properties ?
          '<b>' + properties.ES_ZONE + '</b><br />' + gap + '% more ' + highName + 'students meet standards than their ' + lowName + 'peers at this school.'
          : 'Hover over a school');
      } else {
        ret = '<h4>Achievement Gap</h4>' +  (properties ?
          '<b>' + properties.ES_ZONE + '</b><br />' + gap + '% fewer ' + lowName + ' students meet standards than their peers at this school.'
          : 'Hover over a school');
      }

    }
    return ret;
  }
  return '<h4>Achievement Gap</h4>' + 'Hover over a school'
};

</script>


	  ]]></description>
	</item>

	<item>
	  <title>An Embarrassing Attempt to Map Every School District in the Country</title>
	  <link>//map-nation</link>
	  <author>Kyle Heuton</author>
	  <pubDate>2016-04-28T03:18:00-07:00</pubDate>
	  <guid>//map-nation</guid>
	  <description><![CDATA[
	     <script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>

<script type="text/javascript" src="http://d3js.org/queue.v1.min.js"></script>

<script type="text/javascript" src="http://d3js.org/topojson.v0.min.js"></script>

<script src="http://d3js.org/queue.v1.min.js"></script>

<style>


	.info {
		padding: 6px 8px;
		font: 14px/16px Arial, Helvetica, sans-serif;
		background: white;
		background: rgba(255,255,255,0.8);
		box-shadow: 0 0 15px rgba(0,0,0,0.2);
		border-radius: 5px;
	}
	.info h4 {
		margin: 0 0 5px;
		color: #777;
	}
.legend {
	text-align: left;
	line-height: 18px;
	color: #555;
}
.legend i {
	width: 18px;
	height: 18px;
	float: left;
	margin-right: 8px;
	opacity: 0.7;
}
</style>

<p>This one didn’t work out so hot. Mapping this many locations interactively wasn’t a good idea- I should have made map tiles that could be loaded dynamically. Data were scraped from this excellent <a href="https://www.nytimes.com/interactive/2016/04/29/upshot/money-race-and-success-how-your-school-district-compares.html?_r=0">New York Times article</a> on educational inequality in the US. Shapefiles came from USGS, and I did the fuzzy-name matching myself, but that failed a bit too.</p>
<div id="map">

</div>

<script>
queue()
    .defer(d3.json, 'district_map.json') // topojson polygons

    .await(doIt); // function that uses files

function doIt(error, schoolData) {
	console.warn('but'+error);
	console.warn('here');
function getColor(d) {
    return d > 3 ? '#3288bd' :
           d > 2  ? '#99d594' :
           d > 1  ? '#e6f598' :
           d > 0  ? '#ffffbf' :
           d > -1   ? '#fee08b' :
           d > -2   ? '#fc8d59' :
           d > -3   ? '#d53e4f' :
                      '#d53e4f';
}


var map = L.map('map').setView([47.6062, -122.3321], 11);
L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
	maxZoom: 18,
	attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
}).addTo(map);



		// control that shows state info on hover
		var info = L.control();

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};

		info.update = function (props) {
			this._div.innerHTML = '<h4>Average Score</h4>' +  (props ?
				'<b>' + props.data_name + '</b><br />' + props.score
				: 'Hover over a district');
		};

		info.addTo(map);

		// get border based on which is misisng
		function getBorderColor(d) {
			return d == 'white' ? 'white':
				  	 d == 'black' ? 'black':
						 d == 'none'  ? 'gray':
						 								 'gray';
		}

		// get color depending on population density value
		function getColor(d) {
		    return d > 3 ? '#3288bd' :
		           d > 2  ? '#99d594' :
		           d > 1  ? '#e6f598' :
		           d > 0  ? '#ffffbf' :
		           d > -1   ? '#fee08b' :
		           d > -2   ? '#fc8d59' :
		           d > -3   ? '#d53e4f' :
		                      '#d53e4f';
		}
		var lastClicked;

		function style(feature) {
			return {
				weight: 0.2,
				opacity: 1,
				color: getBorderColor('white'),
				dashArray: '3',
				fillOpacity: 0.7,
				fillColor: getColor(feature.properties.score)
			};
		}

		function highlightFeature(e) {
			var layer = e.target;

			layer.setStyle({
				weight: 5,
				color: getBorderColor('white'),
				dashArray: '',
				fillOpacity: 0.7
			});

			if (!L.Browser.ie && !L.Browser.opera) {
				layer.bringToFront();
			}

			info.update(layer.feature.properties);
			if (lastClicked) {
				resetHighlightClick(lastClicked);
			}
			lastClicked = e;
		}

		var geojson;

		function resetHighlightMouse(e) {
			geojson.resetStyle(e.target);
			info.update();
		}
		function resetHighlightClick(e) {
			geojson.resetStyle(e.target);

		}

		function zoomToFeature(e) {
			map.fitBounds(e.target.getBounds());
		}

		function onEachFeature(feature, layer) {
			layer.on({
				mouseover: highlightFeature,
				click: highlightFeature,
				mouseout: resetHighlightMouse,
				dblclick: zoomToFeature
			});
		}





			geojson = L.geoJson(schoolData, {
				style: style,
				onEachFeature: onEachFeature
			}).addTo(map);

		map.attributionControl.addAttribution('District data &copy; <a href="https://www.nytimes.com/interactive/2016/04/29/upshot/money-race-and-success-how-your-school-district-compares.html?_r=0">NYT</a>');


		var legend = L.control({position: 'bottomright'});

		legend.onAdd = function (map) {

			var div = L.DomUtil.create('div', 'info legend'),
				grades = [-4, -3, -2, -1, 0, 1, 2, 3],
				labels = [],
				from, to;

			for (var i = 0; i < grades.length; i++) {
				from = grades[i];
				to = grades[i + 1];

				labels.push(
					'<i style="background:' + getColor(from + 1) + '"></i> ' +
					from + (to ? '&ndash;' + to : '+'));
			}

			div.innerHTML = labels.join('<br>');
			return div;
		};

		legend.addTo(map);

	};
</script>


	  ]]></description>
	</item>

	<item>
	  <title>An Experimental and broken d3 map</title>
	  <link>//map-gap_d3</link>
	  <author>Kyle Heuton</author>
	  <pubDate>2016-04-04T03:18:00-07:00</pubDate>
	  <guid>//map-gap_d3</guid>
	  <description><![CDATA[
	     <script type="text/javascript" src="my_layer.json"></script>

<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>

<script type="text/javascript" src="http://d3js.org/queue.v1.min.js"></script>

<script type="text/javascript" src="http://d3js.org/topojson.v0.min.js"></script>

<p><select id="opts">
<option value="gap">gap</option>
<option value="missing" selected="selected">missing</option></select></p>

<style>


.map {
  position: relative;
  overflow: hidden;
}
.layer {
  position: absolute;
}
.tile {
  pointer-events: none;
  position: absolute;
  width: 256px;
  height: 256px;
}
.info {
  position: absolute;
  bottom: 10px;
  left: 10px;
}
.legend {
	text-align: left;
	line-height: 18px;
	color: #555;
}
.legend i {
	width: 18px;
	height: 18px;
	float: left;
	margin-right: 8px;
	opacity: 0.7;
}
div.tooltip {   
  position: absolute;           
  text-align: center;           
  width: 150px;                  
  height: 25px;                 
  padding: 2px;             
  font-size: 10px;     
  background: #FFFFE0;
  border: 1px;      
  border-radius: 8px;           
  pointer-events: none;         
}   
</style>

<div id="example"></div>
<script src="//d3js.org/d3.v3.min.js"></script>

<script src="../d3.geo.tile.min.js"></script>

<script>

var width = Math.max( document.getElementById('example').offsetWidth),
    height = Math.min(500, window.innerHeight),
    prefix = prefixMatch(["webkit", "ms", "Moz", "O"]);

var tile = d3.geo.tile()
    .size([width, height]);

var projection = d3.geo.mercator()
    .scale((1 << 20) / 2 / Math.PI)
    .translate([width / 2, height / 2]);

var center = projection([-122.3321, 47.6062]);

var path = d3.geo.path()
    .projection(projection);


var zoom = d3.behavior.zoom()
    .scale(projection.scale() * 2 * Math.PI)
    .scaleExtent([1 << 9, 1 << 23])
    .translate([width - center[0], height - center[1]])
    .on("zoom", zoomed);


var svg = d3.select("div#example").append("svg")
    .attr("width", width)
    .attr("height", height);

var raster = svg.append("g");

var vector = svg.selectAll("path");
svg.call(zoom);
zoomed();
function zoomed() {
  var tiles = tile
      .scale(zoom.scale())
      .translate(zoom.translate())
      ();

  projection
      .scale(zoom.scale() / 2 / Math.PI)
      .translate(zoom.translate());


	svg.selectAll("path").attr("d", path)
	 .attr("fill","#666666")
	 .attr("opacity",0.5);

  var image = raster
      .attr("transform", "scale(" + tiles.scale + ")translate(" + tiles.translate + ")")
    .selectAll("image")
      .data(tiles, function(d) { return d; });

  image.exit()
      .remove();

  image.enter().append("image")

      .attr("xlink:href", function(d) { return  "http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/" + d[2] + "/" + d[1] + "/" + d[0]; })
      .attr("width", 1)
      .attr("height", 1)
      .attr("x", function(d) { return d[0]; })
      .attr("y", function(d) { return d[1]; });
}


//Load in GeoJSON data


		//Bind data and create one path per GeoJSON feature
function draw_map(stuff){
		vector
			 .data(schoolData.features)
			 .enter()
			 .append("path")
			 .attr("d", path)
			 .style("fill",function (d,i) { return getColor(d.properties[stuff]) })
			 .style("stroke",function (d,i) { return getBorderColor(d.properties.missing) })
			 .style("stroke-width", 5)
			 .style("stroke-dasharray", 3)
			 .attr("opacity",0.7);
}
draw_map('gap')

function prefixMatch(p) {
  var i = -1, n = p.length, s = document.body.style;
  while (++i < n) if (p[i] + "Transform" in s) return "-" + p[i].toLowerCase() + "-";
  return "";
}


// handle on click event
d3.select('#opts')
  .on('change', function() {
    draw_map(d3.select(this).property('value'));
});

// get color depending on population density value
function getColor(d) {
 return d > 60 ? '#800026' :
        d > 50  ? '#BD0026' :
        d > 40  ? '#E31A1C' :
        d > 30  ? '#FC4E2A' :
        d > 20   ? '#FD8D3C' :
        d > 10   ? '#FEB24C' :
        d > 5   ? '#FED976' :
                   '#FFEDA0';
}

// get border based on which is misisng
function getBorderColor(d) {
 return d == 'white' ? 'white':
        d == 'black' ? 'black':
        d == 'none'  ? 'gray':
                        'gray';
}
</script>


	  ]]></description>
	</item>

	<item>
	  <title>Mapping 3rd Grade ELA Smarter Balanced Assessment Results</title>
	  <link>//map-gap-ela-leaflet</link>
	  <author>Kyle Heuton</author>
	  <pubDate>2016-03-27T03:18:00-07:00</pubDate>
	  <guid>//map-gap-ela-leaflet</guid>
	  <description><![CDATA[
	     <script type="text/javascript" src="my_layer.json"></script>

<style>


	.info {
		padding: 6px 8px;
		font: 14px/16px Arial, Helvetica, sans-serif;
		background: white;
		background: rgba(255,255,255,0.8);
		box-shadow: 0 0 15px rgba(0,0,0,0.2);
		border-radius: 5px;
	}
	.info h4 {
		margin: 0 0 5px;
		color: #777;
	}
.legend {
	text-align: left;
	line-height: 18px;
	color: #555;
}
.legend i {
	width: 18px;
	height: 18px;
	float: left;
	margin-right: 8px;
	opacity: 0.7;
}
</style>

<div id="map">

</div>

<script>
function getColor(d) {
    return d > 1000 ? '#800026' :
           d > 500  ? '#BD0026' :
           d > 200  ? '#E31A1C' :
           d > 100  ? '#FC4E2A' :
           d > 50   ? '#FD8D3C' :
           d > 20   ? '#FEB24C' :
           d > 10   ? '#800026' :
                      '#800026';
}
var geojson;

var map = L.map('map').setView([47.6062, -122.3321], 11);
L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
	maxZoom: 18,
	attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
}).addTo(map);



		// control that shows state info on hover
		var info = L.control();

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};

		info.update = function (props) {
			this._div.innerHTML = '<h4>Achievement Gap</h4>' +  (props ?
				'<b>' + props.ES_ZONE + '</b><br />' + props.gap + '% more White students meet standards than their Black peers'
				: 'Hover over a school');
		};

		info.addTo(map);

		// get border based on which is misisng
		function getBorderColor(d) {
			return d == 'white' ? 'white':
				  	 d == 'black' ? 'black':
						 d == 'none'  ? 'gray':
						 								 'gray';
		}

		// get color depending on population density value
		function getColor(d) {
			return d > 60 ? '#800026' :
			       d > 50  ? '#BD0026' :
			       d > 40  ? '#E31A1C' :
			       d > 30  ? '#FC4E2A' :
			       d > 20   ? '#FD8D3C' :
			       d > 10   ? '#FEB24C' :
			       d > 5   ? '#FED976' :
			                  '#FFEDA0';
		}
		var lastClicked;

		function style(feature) {
			return {
				weight: 2,
				opacity: 1,
				color: getBorderColor(feature.properties.missing),
				dashArray: '3',
				fillOpacity: 0.7,
				fillColor: getColor(feature.properties.gap)
			};
		}

		function highlightFeature(e) {
			var layer = e.target;

			layer.setStyle({
				weight: 5,
				color: getBorderColor(layer.feature.properties.missing),
				dashArray: '',
				fillOpacity: 0.7
			});

			if (!L.Browser.ie && !L.Browser.opera) {
				layer.bringToFront();
			}

			info.update(layer.feature.properties);
			if (lastClicked) {
				resetHighlightClick(lastClicked);
			}
			lastClicked = e;
		}

		var geojson;

		function resetHighlightMouse(e) {
			geojson.resetStyle(e.target);
			info.update();
		}
		function resetHighlightClick(e) {
			geojson.resetStyle(e.target);

		}

		function zoomToFeature(e) {
			map.fitBounds(e.target.getBounds());
		}

		function onEachFeature(feature, layer) {
			layer.on({
				mouseover: highlightFeature,
				click: highlightFeature,
				mouseout: resetHighlightMouse,
				dblclick: zoomToFeature
			});
		}

		geojson = L.geoJson(schoolData, {
			style: style,
			onEachFeature: onEachFeature
		}).addTo(map);

		map.attributionControl.addAttribution('Assessment data &copy; <a href="http://www.k12.wa.us/">OSPI</a>');


		var legend = L.control({position: 'bottomright'});

		legend.onAdd = function (map) {

			var div = L.DomUtil.create('div', 'info legend'),
				grades = [0, 5, 10, 20, 30, 40, 50, 60],
				labels = [],
				from, to;

			for (var i = 0; i < grades.length; i++) {
				from = grades[i];
				to = grades[i + 1];

				labels.push(
					'<i style="background:' + getColor(from + 1) + '"></i> ' +
					from + (to ? '&ndash;' + to : '+'));
			}

			div.innerHTML = labels.join('<br>');
			return div;
		};

		legend.addTo(map);
		timeout(function() {
		    map.invalidateSize()
		}, 0)

</script>


	  ]]></description>
	</item>


</channel>
</rss>

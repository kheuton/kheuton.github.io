<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>kheuton.github.io/</title>
   
   <link>http://kheuton.github.io/</link>
   <description></description>
   <language>en-uk</language>
   <managingEditor> Kyle Heuton</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>An Experimental and broken d3 map</title>
	  <link>//map-gap_d3</link>
	  <author>Kyle Heuton</author>
	  <pubDate>2016-04-04T03:18:00-07:00</pubDate>
	  <guid>//map-gap_d3</guid>
	  <description><![CDATA[
	     <script type="text/javascript" src="my_layer.json"></script>

<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>

<script type="text/javascript" src="http://d3js.org/queue.v1.min.js"></script>

<script type="text/javascript" src="http://d3js.org/topojson.v0.min.js"></script>

<style>


.map {
  position: relative;
  overflow: hidden;
}
.layer {
  position: absolute;
}
.tile {
  pointer-events: none;
  position: absolute;
  width: 256px;
  height: 256px;
}
.info {
  position: absolute;
  bottom: 10px;
  left: 10px;
}
.legend {
	text-align: left;
	line-height: 18px;
	color: #555;
}
.legend i {
	width: 18px;
	height: 18px;
	float: left;
	margin-right: 8px;
	opacity: 0.7;
}
div.tooltip {   
  position: absolute;           
  text-align: center;           
  width: 150px;                  
  height: 25px;                 
  padding: 2px;             
  font-size: 10px;     
  background: #FFFFE0;
  border: 1px;      
  border-radius: 8px;           
  pointer-events: none;         
}   
</style>

<div id="example"></div>
<script src="//d3js.org/d3.v3.min.js"></script>

<script src="../d3.geo.tile.min.js"></script>

<script>

var width = Math.max(960, document.getElementById('example').offsetWidth),
    height = Math.max(500, window.innerHeight),
    prefix = prefixMatch(["webkit", "ms", "Moz", "O"]);

var tile = d3.geo.tile()
    .size([width, height]);

var projection = d3.geo.mercator()
    .scale((1 << 20) / 2 / Math.PI)
    .translate([width / 2, height / 2]);

var center = projection([-122.3321, 47.6062]);

var path = d3.geo.path()
    .projection(projection);


var zoom = d3.behavior.zoom()
    .scale(projection.scale() * 2 * Math.PI)
    .scaleExtent([1 << 9, 1 << 23])
    .translate([width - center[0], height - center[1]])
    .on("zoom", zoomed);


var svg = d3.select("div#example").append("svg")
    .attr("width", width)
    .attr("height", height);

var raster = svg.append("g");

var vector = svg.append("path");
svg.call(zoom);
zoomed();
function zoomed() {
  var tiles = tile
      .scale(zoom.scale())
      .translate(zoom.translate())
      ();

  projection
      .scale(zoom.scale() / 2 / Math.PI)
      .translate(zoom.translate());

  vector
      .attr("d", path);

	svg.selectAll("path").attr("d", path)
	 .attr("fill","#666666")
	 .attr("opacity",0.5);

  var image = raster
      .attr("transform", "scale(" + tiles.scale + ")translate(" + tiles.translate + ")")
    .selectAll("image")
      .data(tiles, function(d) { return d; });

  image.exit()
      .remove();

  image.enter().append("image")
      .attr("xlink:href", function(d) { return "http://" + ["a", "b", "c"][Math.random() * 3 | 0] + ".tile.openstreetmap.org/" + d[2] + "/" + d[0] + "/" + d[1] + ".png"; })
      .attr("width", 1)
      .attr("height", 1)
      .attr("x", function(d) { return d[0]; })
      .attr("y", function(d) { return d[1]; });
}

//Create SVG element
var svg2 = d3.select("div#example").append("svg").attr({width:width, height: height});

//Load in GeoJSON data


		//Bind data and create one path per GeoJSON feature
		svg.selectAll("path")
			 .data(schoolData.features)
			 .enter()
			 .append("path")
			 .attr("d", path)
			 .attr("fill","#666666")
			 .attr("opacity",0.5);

			 function prefixMatch(p) {
			   var i = -1, n = p.length, s = document.body.style;
			   while (++i < n) if (p[i] + "Transform" in s) return "-" + p[i].toLowerCase() + "-";
			   return "";
			 }
</script>


	  ]]></description>
	</item>

	<item>
	  <title>Mapping 3rd Grade ELA Smarter Balanced Assessment Results</title>
	  <link>//map-gap</link>
	  <author>Kyle Heuton</author>
	  <pubDate>2016-03-27T03:18:00-07:00</pubDate>
	  <guid>//map-gap</guid>
	  <description><![CDATA[
	     <script type="text/javascript" src="my_layer.json"></script>

<style>


	.info {
		padding: 6px 8px;
		font: 14px/16px Arial, Helvetica, sans-serif;
		background: white;
		background: rgba(255,255,255,0.8);
		box-shadow: 0 0 15px rgba(0,0,0,0.2);
		border-radius: 5px;
	}
	.info h4 {
		margin: 0 0 5px;
		color: #777;
	}
.legend {
	text-align: left;
	line-height: 18px;
	color: #555;
}
.legend i {
	width: 18px;
	height: 18px;
	float: left;
	margin-right: 8px;
	opacity: 0.7;
}
</style>

<div id="map">

</div>

<script>
function getColor(d) {
    return d > 1000 ? '#800026' :
           d > 500  ? '#BD0026' :
           d > 200  ? '#E31A1C' :
           d > 100  ? '#FC4E2A' :
           d > 50   ? '#FD8D3C' :
           d > 20   ? '#FEB24C' :
           d > 10   ? '#800026' :
                      '#800026';
}
var geojson;

var map = L.map('map').setView([47.6062, -122.3321], 11);
L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
	maxZoom: 18,
	attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
}).addTo(map);



		// control that shows state info on hover
		var info = L.control();

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};

		info.update = function (props) {
			this._div.innerHTML = '<h4>Achievement Gap</h4>' +  (props ?
				'<b>' + props.ES_ZONE + '</b><br />' + props.gap + '% more White students meet standards than their Black peers'
				: 'Hover over a school');
		};

		info.addTo(map);

		// get border based on which is misisng
		function getBorderColor(d) {
			return d == 'white' ? 'white':
				  	 d == 'black' ? 'black':
						 d == 'none'  ? 'gray':
						 								 'gray';
		}

		// get color depending on population density value
		function getColor(d) {
			return d > 60 ? '#800026' :
			       d > 50  ? '#BD0026' :
			       d > 40  ? '#E31A1C' :
			       d > 30  ? '#FC4E2A' :
			       d > 20   ? '#FD8D3C' :
			       d > 10   ? '#FEB24C' :
			       d > 5   ? '#FED976' :
			                  '#FFEDA0';
		}
		var lastClicked;

		function style(feature) {
			return {
				weight: 2,
				opacity: 1,
				color: getBorderColor(feature.properties.missing),
				dashArray: '3',
				fillOpacity: 0.7,
				fillColor: getColor(feature.properties.gap)
			};
		}

		function highlightFeature(e) {
			var layer = e.target;

			layer.setStyle({
				weight: 5,
				color: getBorderColor(layer.feature.properties.missing),
				dashArray: '',
				fillOpacity: 0.7
			});

			if (!L.Browser.ie && !L.Browser.opera) {
				layer.bringToFront();
			}

			info.update(layer.feature.properties);
			if (lastClicked) {
				resetHighlightClick(lastClicked);
			}
			lastClicked = e;
		}

		var geojson;

		function resetHighlightMouse(e) {
			geojson.resetStyle(e.target);
			info.update();
		}
		function resetHighlightClick(e) {
			geojson.resetStyle(e.target);

		}

		function zoomToFeature(e) {
			map.fitBounds(e.target.getBounds());
		}

		function onEachFeature(feature, layer) {
			layer.on({
				mouseover: highlightFeature,
				click: highlightFeature,
				mouseout: resetHighlightMouse,
				dblclick: zoomToFeature
			});
		}

		geojson = L.geoJson(schoolData, {
			style: style,
			onEachFeature: onEachFeature
		}).addTo(map);

		map.attributionControl.addAttribution('Assessment data &copy; <a href="http://www.k12.wa.us/">OSPI</a>');


		var legend = L.control({position: 'bottomright'});

		legend.onAdd = function (map) {

			var div = L.DomUtil.create('div', 'info legend'),
				grades = [0, 5, 10, 20, 30, 40, 50, 60],
				labels = [],
				from, to;

			for (var i = 0; i < grades.length; i++) {
				from = grades[i];
				to = grades[i + 1];

				labels.push(
					'<i style="background:' + getColor(from + 1) + '"></i> ' +
					from + (to ? '&ndash;' + to : '+'));
			}

			div.innerHTML = labels.join('<br>');
			return div;
		};

		legend.addTo(map);
		timeout(function() {
		    map.invalidateSize()
		}, 0)

</script>


	  ]]></description>
	</item>


</channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>kheuton.github.io/</title>
   
   <link>http://kheuton.github.io/</link>
   <description>Me just trying to figure out how to publish with jekyll.</description>
   <language>en-uk</language>
   <managingEditor> Kyle Heuton</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Mapping 3rd Grade ELA Smarter Balanced Assessment Results</title>
	  <link>//map-gap</link>
	  <author>Kyle Heuton</author>
	  <pubDate>2016-03-27T03:18:00-07:00</pubDate>
	  <guid>//map-gap</guid>
	  <description><![CDATA[
	     <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

<script type="text/javascript" src="my_layer.json"></script>

<style>


	.info {
		padding: 6px 8px;
		font: 14px/16px Arial, Helvetica, sans-serif;
		background: white;
		background: rgba(255,255,255,0.8);
		box-shadow: 0 0 15px rgba(0,0,0,0.2);
		border-radius: 5px;
	}
	.info h4 {
		margin: 0 0 5px;
		color: #777;
	}
.legend {
	text-align: left;
	line-height: 18px;
	color: #555;
}
.legend i {
	width: 18px;
	height: 18px;
	float: left;
	margin-right: 8px;
	opacity: 0.7;
}
</style>

<div id="map">

</div>

<script>
function getColor(d) {
    return d > 1000 ? '#800026' :
           d > 500  ? '#BD0026' :
           d > 200  ? '#E31A1C' :
           d > 100  ? '#FC4E2A' :
           d > 50   ? '#FD8D3C' :
           d > 20   ? '#FEB24C' :
           d > 10   ? '#800026' :
                      '#800026';
}
var geojson;

var map = L.map('map').setView([47.6062, -122.3321], 11);
L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
	maxZoom: 18,
	attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
}).addTo(map);



		// control that shows state info on hover
		var info = L.control();

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};

		info.update = function (props) {
			this._div.innerHTML = '<h4>Achievement Gap</h4>' +  (props ?
				'<b>' + props.ES_ZONE + '</b><br />' + props.gap + '% more White students meet standards than their Black peers'
				: 'Hover over a school');
		};

		info.addTo(map);

		// get border based on which is misisng
		function getBorderColor(d) {
			return d == 'white' ? 'white':
				  	 d == 'black' ? 'black':
						 d == 'none'  ? 'gray':
						 								 'gray';
		}

		// get color depending on population density value
		function getColor(d) {
			return d > 60 ? '#800026' :
			       d > 50  ? '#BD0026' :
			       d > 40  ? '#E31A1C' :
			       d > 30  ? '#FC4E2A' :
			       d > 20   ? '#FD8D3C' :
			       d > 10   ? '#FEB24C' :
			       d > 5   ? '#FED976' :
			                  '#FFEDA0';
		}

		function style(feature) {
			return {
				weight: 2,
				opacity: 1,
				color: getBorderColor(feature.properties.missing),
				dashArray: '3',
				fillOpacity: 0.7,
				fillColor: getColor(feature.properties.gap)
			};
		}

		function highlightFeature(e) {
			var layer = e.target;

			layer.setStyle({
				weight: 5,
				color: '#666',
				dashArray: '',
				fillOpacity: 0.7
			});

			if (!L.Browser.ie && !L.Browser.opera) {
				layer.bringToFront();
			}

			info.update(layer.feature.properties);
		}

		var geojson;

		function resetHighlight(e) {
			geojson.resetStyle(e.target);
			info.update();
		}

		function zoomToFeature(e) {
			map.fitBounds(e.target.getBounds());
		}

		function onEachFeature(feature, layer) {
			layer.on({
				mouseover: highlightFeature,
				mouseout: resetHighlight,
				click: zoomToFeature
			});
		}

		geojson = L.geoJson(schoolData, {
			style: style,
			onEachFeature: onEachFeature
		}).addTo(map);

		map.attributionControl.addAttribution('Assessment data &copy; <a href="http://www.k12.wa.us/">OSPI</a>');


		var legend = L.control({position: 'bottomright'});

		legend.onAdd = function (map) {

			var div = L.DomUtil.create('div', 'info legend'),
				grades = [0, 5, 10, 20, 30, 40, 50, 60],
				labels = [],
				from, to;

			for (var i = 0; i < grades.length; i++) {
				from = grades[i];
				to = grades[i + 1];

				labels.push(
					'<i style="background:' + getColor(from + 1) + '"></i> ' +
					from + (to ? '&ndash;' + to : '+'));
			}

			div.innerHTML = labels.join('<br>');
			return div;
		};

		legend.addTo(map);

</script>


	  ]]></description>
	</item>


</channel>
</rss>
